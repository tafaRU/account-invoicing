-
    In order to test process of the Account Invoice Uos,
- 
    I create a sale order.
-  
    !record {model: sale.order, id: sale_order_test}:
        partner_id: base.res_partner_2
        order_line:
            - product_id: product.product_product_2
              product_uom_qty: 8
              product_uom: product.product_uom_hour
              product_uos_qty: 1
              product_uom: product.product_uom_day
-
    I confirm the sale order.
-
    !workflow {model: sale.order, action: order_confirm, ref: sale_order_test}
-
    Now, I dispatch delivery order.
-
    !python {model: stock.partial.picking}: |
        order = self.pool.get('sale.order').browse(cr, uid, ref("sale_order_test"))
        for pick in order.picking_ids:
            data = pick.force_assign()
            if data == True:
              partial_id = self.create(cr, uid, {}, context={'active_model': 'stock.picking','active_ids': [pick.id]})
              self.do_partial(cr, uid, [partial_id])
-
    I create invoice from delivery order.
-
    !python {model: stock.invoice.onshipping}: |
        sale = self.pool.get('sale.order')
        sale_order = sale.browse(cr, uid, ref("sale_order_test"))
        ship_ids = [x.id for x in sale_order.picking_ids]
        wiz_id = self.create(cr, uid, {'journal_id': ref('account.sales_journal')},
          {'active_ids': ship_ids, 'active_model': 'stock.picking'})
        self.create_invoice(cr, uid, [wiz_id], {"active_ids": ship_ids, "active_id": ship_ids[0]})
-
    I check the invoice details after dispatched delivery.
-
    !python {model: sale.order}: |
        order = self.browse(cr, uid, ref("sale_order_test"))
        assert order.invoice_ids, "Invoice is not created."
        for sale_line in order.order_line:
            for invoice_line in sale_line.invoice_lines:
                assert invoice_line.sale_uos_id == sale_line.product_uos, "Uos are not correspond"
                assert invoice_line.sale_uos_qty == sale_line.product_uos_qty, "Uos qty are not correspond"
